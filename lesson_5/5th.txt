Функции

1.Декларация
2.Выражения
3.Стрелочная функция

const sayHi = name => `Hello ${name}!`


Декларацию используем для лучшей органризации кода (потому что вызвать ее можно и до и после объявления)

Функции выражения нужны для создания методов в объектах

Стрелочные функции используются используются как функции обратного вызова для других функций


Методы массивов

isArray ()

console.log (Array.isArray(pets))  true/false
для выяснения является ли переменная массивом

includes()

используется чтобы выяснить что точно знать есть ли искомый элемент внутри массива
console.log(pets.includes(`dog`)) ture/false

Join ()

Для склейки
console.log(numbers.join(', '))

indexOf ()

Для поиска индекса элемента (возвращает либо индекс либо если не нашел возвращает -1)

console.log(pets.indexOf('dog')) 1

concat ()

Соединяет два массива
console.log()

splice() // inplace

Чтобы добавить элемент в массив или удалить его из массива
names.splice(1, 0, 'John') - вторым аргументом мы указываем сколько элементов мы хотим удалить - 0
console.log(names)

slice()

Вырезает кусок массива и возвращает полученное в виде массива не меняя оригинальный массив
console.log(pets2.slice(1))

sort()

Метод сортировки // inplace (модифицирует первоначальный массив)

сортирует переводя то что в массиве в ASCII символы
cosole.log()

Циклы массивов (методы)

[].find((current) => {}) найти одного

console.log(users.find(user => user.name === 'Amy'))

[].filter отфильтровать (найти несколько) проходится по всем элементам и возвращает часть массива

[].forEach перебирает весь массив (ничего не возвращает модифицирует массив добавляя или удаляя свойства элементов)

[].map возвращает + создает новый массив при этом старый массив остается без изменений

[].reduce (accumulato, current)
accumulator - переменная общая для всех итераций цикла

const numbers = [4, 5, 6];
 const sum = numbers.reduce((acc, number) => {
    return acc + number
 }, 0)

 console.log(sum)